[
  // remove unwanted shortcuts/missclicks
  {
    "key": "end",
    "command": "-editor.action.goToBottomHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "end",
    "command": "-cursorEnd",
    "when": "textInputFocus"
  },
  {
    "key": "end",
    "command": "-lastCompressedFolder",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "end",
    "command": "-list.focusLast",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "end",
    "command": "-workbench.statusBar.focusLast",
    "when": "statusBarFocused"
  },
  {
    "key": "end",
    "command": "-notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "home",
    "command": "-editor.action.goToTopHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "home",
    "command": "-list.focusFirst",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "home",
    "command": "-workbench.statusBar.focusFirst",
    "when": "statusBarFocused"
  },
  {
    "key": "home",
    "command": "-notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "home",
    "command": "-firstCompressedFolder",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "home",
    "command": "-cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "pagedown",
    "command": "-editor.action.pageDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "pagedown",
    "command": "-selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "pagedown",
    "command": "-workbench.action.terminal.selectNextPageSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "pagedown",
    "command": "-workbench.action.interactivePlayground.pageDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "pagedown",
    "command": "-notebook.cell.cursorPageDown",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "pagedown",
    "command": "-notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "pagedown",
    "command": "-list.focusPageDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "pagedown",
    "command": "-cursorPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "pageup",
    "command": "-workbench.action.terminal.selectPrevPageSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "pageup",
    "command": "-workbench.action.interactivePlayground.pageUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "pageup",
    "command": "-selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "pageup",
    "command": "-list.focusPageUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "pageup",
    "command": "-notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "pageup",
    "command": "-cursorPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "pageup",
    "command": "-editor.action.pageUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "pageup",
    "command": "-notebook.cell.cursorPageUp",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  // Focus File Tree
  {
    "key": "space e",
    "command": "workbench.files.action.focusFilesExplorer",
    "when": "!workbench.files.action.focusFilesExplorer && !inputFocus"
  },
  // File Tree Motions
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Go Back to File From Sidebar
  {
    "key": "escape",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "sideBarFocus"
  },
  // Open Folder
  {
    "key": "space o f",
    "command": "workbench.action.files.openFolderViaWorkspace",
    "when": "!inputFocus"
  },
  // Find File
  {
    "key": "space f f",
    "command": "workbench.action.quickOpen",
    "when": "!inputFocus"
  },
  // Open/Close Terminal
  {
    "key": "`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active && vim.mode != 'Insert'"
  },
  // Open Extensions
  {
    "key": "space x",
    "command": "workbench.view.extensions",
    "when": "!inputFocus"
  },
  // Open Source Control
  {
    "key": "space g",
    "command": "workbench.view.scm",
    "when": "!inputFocus"
  },
  // move screen up and down
  {
    "key": "pagedown",
    "command": "scrollPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "pageup",
    "command": "scrollPageUp",
    "when": "textInputFocus"
  },
  // System Redo
  {
    "key": "ctrl+r",
    "command": "redo"
  }
]
